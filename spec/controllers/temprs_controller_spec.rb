require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::TemprsController, type: :controller do
  let!(:device_group) { FactoryBot.create(:device_group) }
  let!(:tempr) { FactoryBot.create(:tempr, device_group: device_group) }

  # This should return the minimal set of attributes required to create a valid
  # Tempr. As you add validations to Tempr, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.attributes_for(:tempr, device_group_id: device_group.id)
  end

  let(:invalid_attributes) { { name: nil } }

  describe 'GET #index' do
    it 'returns a success response' do
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: tempr.to_param }
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Tempr' do
        expect do
          post :create, params: { tempr: valid_attributes }
        end.to change(Tempr, :count).by(1)
      end

      context 'renders a JSON response with the new tempr' do
        before do
          post :create, params: { tempr: valid_attributes }
        end

        it { expect(response).to have_http_status(:created) }
        it { expect(response.content_type).to eq('application/json; charset=utf-8') }
      end
    end

    context 'with invalid params' do
      before do
        post :create, params: { tempr: invalid_attributes }
      end

      context 'renders a JSON response with errors for the new tempr' do
        it { expect(response).to have_http_status(:unprocessable_entity) }
        it { expect(response.content_type).to eq('application/json; charset=utf-8') }
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) { { name: 'New Name' } }

      context 'updates the requested tempr' do
        before do
          put :update, params: { id: tempr.to_param, tempr: new_attributes }
          tempr.reload
        end

        it { expect(tempr.name).to eq('New Name') }
      end

      context 'renders a JSON response with the tempr' do
        before do
          put :update, params: { id: tempr.to_param, tempr: valid_attributes }
        end

        it { expect(response).to have_http_status(:ok) }
        it { expect(response.content_type).to eq('application/json; charset=utf-8') }
      end
    end

    context 'with invalid params' do
      context 'renders a JSON response with errors for the tempr' do
        before do
          put :update, params: { id: tempr.to_param, tempr: invalid_attributes }
        end

        it { expect(response).to have_http_status(:unprocessable_entity) }
        it { expect(response.content_type).to eq('application/json; charset=utf-8') }
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested tempr' do
      expect {
        delete :destroy, params: {id: tempr.to_param}
      }.to change(Tempr, :count).by(-1)
    end
  end

end
